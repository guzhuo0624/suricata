<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <info>
        <title>LibHTP Manual</title>
        <authorgroup>
            <author>
                <orgname>Qualys, Inc.</orgname>
            </author>
            <author>
                <personname>Ivan RistiÄ‡</personname>
            </author>
        </authorgroup>
    </info>
    <chapter>
        <title>Introduction</title>        
        
            <para>LibHTP is a security-aware parser for the HTTP protocol and the related bits and
            pieces. The goals of the project, in the order of importance, are as follows: </para>
        <variablelist>
            <varlistentry>
                <term>Completeness of coverage</term>
                <listitem>
                    <para>LibHTP must be able to parse virtually all traffic that is found in
                        practice.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Permissive parsing</term>
                <listitem>
                    <para>LibHTP must never fail to parse a stream that would be parsed by some
                        other web server.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Awareness of evasion techniques</term>
                <listitem>
                    <para>LibHTP must be able to detect and effectively deal with various evasion
                        techniques, producing, where practical, identical or practically identical
                        results as the web server processing the same traffic stream.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Performance</term>
                <listitem>
                    <para>The performance must be adequate for the desired tasks. Completeness and
                        security are often detrimental to performance. Our idea of handling the
                        conflicting requirements is to put the library user in control, allowing him
                        to choose the most desired library characteristic.</para>
                </listitem>
            </varlistentry>
        </variablelist>
        <warning>
            <para>LibHTP is not yet considered stable. Use at your own risk. Do not use in
                production. Work is currently under way to ensure that the code is secure and that
                it performs well. The library is still young; it will take some time before it can
                be considered feature-complete.</para>
        </warning>
        <section>
            <title>License</title>
            <para>LibHTP is licensed under the BSD 3-Clause license (also known as "BSD New" and
                "BSD Simplified".):</para>
            <programlisting>Copyright (c) 2009-2010 Open Information Security Foundation
Copyright (c) 2010-2013 Qualys, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

- Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.

- Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.

- Neither the name of the Qualys, Inc. nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</programlisting>
        </section>
        <section>
            <title>Installation</title>
            <para>Assuming you're using an already packaged version of LibHTP, the installation
                process should be as simple as:</para>
            <programlisting>$ ./configure
$ make
$ sudo make install</programlisting>
            <para>If you've retrieved your LibHTP directly from the repository, you will need to
                perform the following steps first:</para>
            <orderedlist>
                <listitem>
                    <para>Retrieve the sources of the version you wish to use</para>
                </listitem>
                <listitem>
                    <para>Update the version number in htp.pc.in and configure.ac</para>
                </listitem>
                <listitem>
                    <para>Run autogen.sh, which will update the build system</para>
                </listitem>
                <listitem>
                    <para>Run doxygen to generate the API documentation</para>
                </listitem>
                <listitem>
                    <para>Continue to install as described above</para>
                </listitem>
            </orderedlist>
        </section>
        <section>
            <title>Usage</title>
            <para/>
            <section>
                <title>Normalization Features</title>
                <para/>
                <section>
                    <title>Raw NUL terminates request line</title>
                    <para/>
                </section>
                <section>
                    <title>Lowercase</title>
                    <para>Convert characters to lowercase. Typically used on paths, with servers
                        with case-insensitive filesystems.</para>
                </section>
                <section>
                    <title>Convert backslashes to forwardslashes</title>
                    <para>Convert all backlash characters to forwardslash characters. Typically used
                        on paths, with servers that support both as path separators.</para>
                </section>
                <section>
                    <title>Compress path separator characters</title>
                    <para>Convert multiple path separator characters into one (e.g.,
                            <literal>///</literal> is converted to <literal>/</literal>).</para>
                </section>
                <section>
                    <title>RFC URI normalization</title>
                    <para>Normalize URI according to the RFC. Handles self-references
                            (<literal>./</literal>) and back-references
                        (<literal>../</literal>).</para>
                </section>
                <section>
                    <title>URL decoding</title>
                    <para>Decode URL-encoded characters (<literal>%HH</literal>). Configurable
                        handling of invalid encoding: decode anyway, remove the <literal>%</literal>
                        character, and ignore (continues decoding after the <literal>%</literal>
                        character).</para>
                    <para>Request query string and request body in
                            <literal>application/x-www-form-urlencoded</literal> are always
                        decoded.</para>
                </section>
                <section>
                    <title>%u decoding</title>
                    <para>Decode <literal>%u</literal>-encoded characters
                        (<literal>%uHHHH</literal>). Configurable handling of invalid
                        encoding.</para>
                </section>
                <section>
                    <title>Convert UTF-8 characters</title>
                    <para>Convert UTF-8 characters into single bytes. Useful to counter evasion with
                        overlong UTF-8 characters (ASCII characters needlessly encoded as UTF-8).
                        Best-fit mapping is used when a characters cannot be cleanly converted to a
                        single byte.</para>
                </section>
                <section>
                    <title>URL-decode request line before parsing</title>
                    <para/>
                </section>
                <section>
                    <title>Best-fit mapping</title>
                    <para>Used whenever a Unicode character needs to be converted to a single byte.
                        There's a default map, but a custom map can be provided. Also supports the
                        setting of a default replacement character, which is used when a better fit
                        is not available.</para>
                </section>
                <section>
                    <title>Transcoding</title>
                    <para>Convert from one character encoding to another.</para>
                </section>
            </section>
            <section>
                <title>Dealing with Proxies</title>
                <para>Under normal circumstances, when you're monitoring HTTP traffic the TCP
                    addresses and ports will be those of the clients and servers involved in direct
                    communication. If there are proxies on the network, however, server address and
                    port may be those used by proxies, and not of the target HTTP servers.</para>
                <para>If you want LibHTP to "see" and propagate actual server address and port, the
                    solution is to wait for LibHTP to parse the request line and and use a
                        <literal>REQUEST_LINE</literal> callback to overwrite the TCP address and
                    port with the information extracted from the request.</para>
            </section>
        </section>        
    </chapter>
    
</book>
